plot(d$DateTime , d$Global_active_power, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
lines(d$DateTime , d$Global_active_power)
png(file="plot2.png", width = 480, height = 480, units = "px", bg="transparent")
# make Plot
plot(d$DateTime , d$Global_active_power, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
lines(d$DateTime , d$Global_active_power)
dev.off()
names(d)
# make Plot
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
lines(d$DateTime , d$Sub_metering_1)
plot(d$DateTime , d$Sub_metering_2, type="n", col="red")
lines(d$DateTime , d$Sub_metering_2)
plot(d$DateTime , d$Sub_metering_3, type="n", col="blue")
lines(d$DateTime , d$Sub_metering_3)
plot(d$DateTime , d$Sub_metering_3, type="n", col="blue")
lines(d$DateTime , d$Sub_metering_3)
plot(d$DateTime , d$Sub_metering_2, col="red")
lines(d$DateTime , d$Sub_metering_2)
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
points(d$DateTime, d$Sub_metering_1, col="black")
points(d$DateTime, d$Sub_metering_2, col="red")
points(d$DateTime, d$Sub_metering_3, col="blue")
lines(d$DateTime , d$Sub_metering_1)
lines(d$DateTime , d$Sub_metering_2)
lines(d$DateTime , d$Sub_metering_2)
lines(d$DateTime , d$Sub_metering_3)
legend("topright")
legend("topright", legend="My Legend")
legend("topright", legend=d$Sub_metering_1)
names(d)
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
points(d$DateTime, d$Sub_metering_1, col="black")
points(d$DateTime, d$Sub_metering_2, col="red")
points(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
?legend
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red","blue"))
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red","blue"))
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red","blue"), lty=1)
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red","blue"), lty=1)
png(file="plot3.png", width = 480, height = 480, units = "px", bg="transparent")
# make Plot
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red","blue"), lty=1)
dev.off()
names(d)
plot(d$DateTime , d$Global_reactive_power, type="n", col="black", xlab="", ylab = "Global_reactive_power")
lines(d$DateTime, d$Global_reactive_power, col="black")
?par
par(mfrow=c(2,2)
)
hist(d$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
plot(d$DateTime , d$Global_active_power, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
lines(d$DateTime , d$Global_active_power)
####################
##    Plot 3
####################
# make Plot
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red","blue"), lty=1)
# make Plot
plot(d$DateTime , d$Global_reactive_power, type="n", col="black", xlab="", ylab = "Global_reactive_power")
lines(d$DateTime, d$Global_reactive_power, col="black")
names(d)
plot(d$DateTime , d$Voltage, type="n", col="black", xlab="datetime", ylab = "Voltage")
lines(d$DateTime, d$Voltage, col="black")
plot(d$DateTime , d$Global_reactive_power, type="n", col="black", xlab="datetime", ylab = "Global_reactive_power")
lines(d$DateTime, d$Global_reactive_power, col="black")
par(mfrow=c(2,2))
####################
##    Plot A
####################
# make Plot
plot(d$DateTime , d$Global_active_power, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
lines(d$DateTime , d$Global_active_power)
####################
##    Plot B
####################
# make Plot
plot(d$DateTime , d$Voltage, type="n", col="black", xlab="datetime", ylab = "Voltage")
lines(d$DateTime, d$Voltage, col="black")
####################
##    Plot C
####################
# make Plot
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red","blue"), lty=1)
####################
##    Plot D
####################
# make Plot
plot(d$DateTime , d$Global_reactive_power, type="n", col="black", xlab="datetime", ylab = "Global_reactive_power")
lines(d$DateTime, d$Global_reactive_power, col="black")
?plot
plot(d$DateTime , d$Voltage, type="n", col="black", xlab="datetime", ylab = "Voltage", breaks=7)
lines(d$DateTime, d$Voltage, col="black")
plot(d$DateTime , d$Voltage, type="n", col="black", xlab="datetime", ylab = "Voltage", breaks=8)
plot(d$DateTime , d$Voltage, type="n", col="black", xlab="datetime", ylab = "Voltage", type="l")
lines(d$DateTime, d$Voltage, col="black")
plot(d$DateTime , d$Voltage, type="l", col="black", xlab="datetime", ylab = "Voltage")
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xaxp  = c(234,246,7))
# make Plot
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xaxp  = c(234,246,7))
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xaxp  = c(234,246,4))
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xaxp  = c(234,246,4))
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xaxp  = c(234,246,1))
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xaxp  = c(0,246,1))
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xaxp  = c(234,246,1))
?xaxp
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
axis=FALSE)
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
axes=FALSE)
axis(side = 1, at = c(234, 246,10))
box()
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xlim=c(min(d$DateTime), max(d$DateTime)), ylim=c(min(d$Voltage), max(d$Voltage))
)
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
xlim=c(min(d$DateTime), max(d$DateTime)), ylim=c(min(d$Voltage), max(d$Voltage))
)
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
ylim=c(min(d$Voltage), max(d$Voltage))
)
# make Plot
plot(d$DateTime , d$Global_reactive_power, type="l",
col="black", xlab="datetime", ylab = "Global_reactive_power",
ylim=c(min(d$Voltage), max(d$Voltage))
)
plot(d$DateTime , d$Global_reactive_power, type="l",
col="black", xlab="datetime", ylab = "Global_reactive_power",
ylim=c(min(d$Global_reactive_power), max(d$Global_reactive_power))
)
?legend
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
fill="n", border="n")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
fill=FALSE, border=FALSE)
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
fill="transparent", border="transparent")
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
fill="transparent", border="transparent", bg="transparent")
?legend
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
bty ="n",fill="transparent", border="transparent", bg="transparent")
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
bty ="n")
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
bty ="n")
par(mfrow=c(2,2))
####################
##    Plot A
####################
# make Plot
plot(d$DateTime , d$Global_active_power, type="n", col="black", xlab="", ylab = "Global Active Power")
lines(d$DateTime , d$Global_active_power)
####################
##    Plot B
####################
# make Plot
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
ylim=c(min(d$Voltage), max(d$Voltage))
)
####################
##    Plot C
####################
# make Plot
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
bty ="n")
####################
##    Plot D
####################
# make Plot
plot(d$DateTime , d$Global_reactive_power, type="l",
col="black", xlab="datetime", ylab = "Global_reactive_power",
ylim=c(min(d$Global_reactive_power), max(d$Global_reactive_power))
)
png(file="plot4.png", width = 480, height = 480, units = "px", bg="transparent")
# Set up global plot config
par(mfrow=c(2,2))
####################
##    Plot A
####################
# make Plot
plot(d$DateTime , d$Global_active_power, type="n", col="black", xlab="", ylab = "Global Active Power")
lines(d$DateTime , d$Global_active_power)
####################
##    Plot B
####################
# make Plot
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
ylim=c(min(d$Voltage), max(d$Voltage))
)
####################
##    Plot C
####################
# make Plot
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
bty ="n")
####################
##    Plot D
####################
# make Plot
plot(d$DateTime , d$Global_reactive_power, type="l",
col="black", xlab="datetime", ylab = "Global_reactive_power",
ylim=c(min(d$Global_reactive_power), max(d$Global_reactive_power))
)
# Turn off device
dev.off()
### Exploratory Data Analysis Assignment 1 - 2014-05-11
## Plot 1
setwd("~/Documents/Coursera/dataScienceSpecialisation/exploratoryDataAnalysis")
# Install Required packages
if( grep( "lubridate", .packages(all.available=TRUE)) < 1 ){
install.packages("lubridate")
}
# require(pkg) || install.packages(pkg)
library(lubridate)
## Read Data
data <- read.table("household_power_consumption.txt",
header = TRUE, sep = ";", na.strings = "?",
colClasses = c("character","character","numeric","numeric",
"numeric","numeric","numeric","numeric")
)
# Convert Date column to date type
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
# Pull out relevant date range
d <- data[ which( data$Date >= "2007-02-01" & data$Date <="2007-02-02"), ]
# Free up some memory
rm(data)
d$DateTime <- strptime(paste(d$Date, d$Time), format="%Y-%m-%d %H:%M:%S" )
####################
##    Plot 1
####################
# open connection to PNG
png(file="plot1.png", width = 480, height = 480, units = "px", bg="transparent")
# make Plot
hist(d$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
png(file="plot2.png", width = 480, height = 480, units = "px", bg="transparent")
# make Plot
plot(d$DateTime , d$Global_active_power, type="n", col="black", xlab="", ylab = "Global Active Power (kilowatts)")
lines(d$DateTime , d$Global_active_power)
dev.off()
png(file="plot3.png", width = 480, height = 480, units = "px", bg="transparent")
# make Plot
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red","blue"), lty=1)
dev.off()
# open connection to PNG
png(file="plot4.png", width = 480, height = 480, units = "px", bg="transparent")
# Set up global plot config
par(mfrow=c(2,2))
####################
##    Plot A
####################
# make Plot
plot(d$DateTime , d$Global_active_power, type="n", col="black", xlab="", ylab = "Global Active Power")
lines(d$DateTime , d$Global_active_power)
####################
##    Plot B
####################
# make Plot
plot(d$DateTime , d$Voltage, type="l", col="black",
xlab="datetime", ylab = "Voltage",
ylim=c(min(d$Voltage), max(d$Voltage))
)
####################
##    Plot C
####################
# make Plot
plot(d$DateTime , d$Sub_metering_1, type="n", col="black", xlab="", ylab = "Energy sub metering")
lines(d$DateTime, d$Sub_metering_1, col="black")
lines(d$DateTime, d$Sub_metering_2, col="red")
lines(d$DateTime, d$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col=c("black","red","blue"), lty=1,
bty ="n")
####################
##    Plot D
####################
# make Plot
plot(d$DateTime , d$Global_reactive_power, type="l",
col="black", xlab="datetime", ylab = "Global_reactive_power",
ylim=c(min(d$Global_reactive_power), max(d$Global_reactive_power))
)
# Turn off device
dev.off()
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each=50)
y <- x+f-f*x+rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1) )
f
y
f <- rep(0:1, each=50)
f
y <- x+f-f*x+rnorm(100, sd=0.5)
y
xyplot(x~y | f, panel = function(x,y, ...) {
panel.xyplot(x,y, ...)
panel.abline(h = median(y), lty = 2)
}
)
xyplot(x~y | f, panel = function(x,y, ...) {
panel.xyplot(x,y, ...)
lmline(x, y, col = 2)
}
)
xyplot(x~y | f, panel = function(x,y, ...) {
panel.xyplot(x,y, ...)
panel.lmline(x, y, col = 2)
}
)
f <- factor(f, labels=c("Group 1", "Group 2"))
xyplot(x~y | f, panel = function(x,y, ...) {
panel.xyplot(x,y, ...)
panel.lmline(x, y, col = 2)
}
)
5*15
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qlot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color = drv)
qplot(displ, hwy, data=mpg, geom("point","smooth"))
qplot(displ, hwy, data=mpg, geom = c("point","smooth"))
?qplot
?smooth
?loess
qplot(displ, data=mpg, color = drv)
qplot(displ, data=mpg, fill = drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(displ, hwy, data=mpg, facets = drv~.)
qplot(displ, hwy, data=mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, data=mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 2)
str(maacs)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 2, geom="density")
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 2, geom="density", color=drv)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 2, shape = drv)
qplot(displ, hwy, data=mpg, geom = c("point","smooth"), method = "lm")
qplot(displ, hwy, data=mpg, geom = c("point","smooth"), method = "lm", facets = .~drv)
names(mpg)
g <- qplot(mpg, aes(displ, hwy))
print(g)
p <- g + geom_point()
print(p)
g <- ggplot(mpg, aes(displ, hwy))
print(g) # see no plot
p <- g + geom_point()
print(p)
p <- g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() +facet_grid(. ~ drv) + geom_smooth(method = "lm")
g + geom_point(color = "steelblue", size=4, alpha = 0.5)
g + geom_point(aes(color = drv) , size=4, alpha = 0.5)
g + geom_point(aes(color = drv) , size=4, alpha = 0.5) + labs(title = "My Title", labs(x = "some x axis"))
g + geom_point(aes(color = drv) , size=4, alpha = 0.5) +
labs(title = "My Title") + labs(x = "some x axis")
g + geom_point(aes(color = drv) , size=4, alpha = 0.5) +
labs(title = "My Title") + labs(x = "some x axis") + labs(y = "some y axis")
g + geom_point(aes(color = drv) , size=4, alpha = 0.5)  + geom_smooth(size = 4, linetype = 3,
method = "lm", se = FALSE)
g + geom_point(aes(color = drv) , size=4, alpha = 0.5)  + geom_smooth(size = 4, linetype = 2,
method = "lm", se = FALSE)
g + geom_point(aes(color = drv) , size=4, alpha = 0.5)  + geom_smooth(size = 4, linetype = 19,
method = "lm", se = FALSE)
g + geom_point(aes(color = drv) , size=4, alpha = 0.5)  + geom_smooth(size = 4, linetype = 21,
method = "lm", se = FALSE)
g + geom_point(aes(color = drv) , size=4, alpha = 0.5)  + geom_smooth(size = 4, linetype = 21,
method = "lm", se = FALSE)
+ theme_gray(base_family = "Times")
data <- data.frame(x = 1:100, y = rnorm(100))
data[50,2] <- 100 ## Outlier!
plot(data$x, data$y, type="l", ylim = c(-3,3))
g <- ggplot(data, aes(x=x,y=x))
g <- ggplot(data, aes(x=x,y=x))
g + geom_line()
g <- ggplot(data, aes(x=x,y=y))
g + geom_line()
g + geom_line() + coord_cartesian( ylin = c(-3,3))
g + geom_line() + coord_cartesian( ylim = c(-3,3))
cutpoints <- quantile(data$y, seq(0,1, length=4), na.rm=TRUE)
cutpoints
data$no2dec <- cut(data$y, cutpoints)
data$no2dec
levels(data$no2dec)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
?par
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
names(movies)
g <- ggplot(votes, rating, data = movies, aes(votes, rating))
g+ geom_point
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
g+ geom_point()
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
